#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C,W0212,W0718


"console"


import os
import readline
import sys
import termios
import threading
import time
import _thread


from nixt.modules import face
from nixt.object  import Obj, parse
from nixt.persist import Workdir
from nixt.runtime import Commands, Errors, Reactor, later


NAME = Errors.__module__.split(".", maxsplit=2)[-2]
Workdir.wdr = os.path.expanduser(f"~/.{NAME}")


Cfg = Obj()


class Console(Reactor):

    def __init__(self):
        Reactor.__init__(self)
        self.register("event", command)

    def callback(self, evt):
        Reactor.callback(self, evt)
        evt.wait()

    def display(self, evt):
        for txt in evt.result:
            self.raw(txt)

    def poll(self):
        evt = Event()
        evt.txt = input("> ")
        return evt

    def raw(self, txt):
        print(txt)


class Event:

    def __init__(self):
        self._ready  = threading.Event()
        self._thr    = None
        self.channel = ""
        self.orig    = ""
        self.result  = []
        self.txt     = ""
        self.type    = "event"

    def __getattr__(self, key):
        return self.__dict__.get(key, "")

    def __str__(self):
        return str(self.__dict__)

    def ready(self):
        self._ready.set()

    def reply(self, txt):
        self.result.append(txt)

    def wait(self):
        self._ready.wait()
        if self._thr:
            self._thr.join()


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{Cfg.name.upper()} since {tme}")


def errors():
    for error in Errors.errors:
        for line in error:
            print(line)


def command(bot, evt):
    parse(evt, evt.txt)
    if "ident" in dir(bot):
        evt.orig = bot.ident
    func = Commands.cmds.get(evt.cmd, None)
    if func:
        try:
            func(evt)
            bot.display(evt)
        except Exception as ex:
            later(ex)
    evt.ready()


def forever():
    while True:
        try:
            time.sleep(1.0)
        except (KeyboardInterrupt, EOFError):
            _thread.interrupt_main()


def init(*pkgs):
    mods = []
    for pkg in pkgs:
        for modname in dir(pkg):
            if modname.startswith("__"):
                continue
            modi = getattr(pkg, modname)
            if "init" not in dir(modi):
                continue
            thr = launch(modi.init, "init")
            mods.append((modi, thr))
    return mods


def scan(*pkgs):
    for pkg in pkgs:
        for mod in dir(pkg):
            if mod.startswith("__"):
                continue
            modi = getattr(pkg, mod)
            if "register" not in dir(modi):
                continue
            modi.register()




def wrap(func):
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    except Exception as ex:
        later(ex)
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


def main():
    parse(Cfg, " ".join(sys.argv[1:]))
    scan(face)
    if "v" in Cfg.opts:
        readline.redisplay()
        banner()
    if "i" in Cfg.opts:
        for _mod, thr in init(face):
            if "w" in Cfg.opts:
                thr.join()
    csl = Console()
    csl.start()
    forever()


if __name__ == "__main__":
    wrap(main)
    errors()
