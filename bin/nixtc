#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C,W0212,W0718


"console"


import os
import readline
import sys
import termios
import threading
import time
import _thread


from nixt.object  import Obj, parse
from nixt.persist import Workdir, modname
from nixt.runtime import Commands, Errors, Event, Reactor
from nixt.runtime import forever, later, launch, scan


NAME = Errors.__module__.split(".", maxsplit=2)[-2]
Workdir.wdr = os.path.expanduser(f"~/.{NAME}")


Cfg = Obj()


if os.path.exists("mods"):
    import mods.face as MODS
else:
    MODS = None


modpathz = modname()


if os.path.exists(modpathz):
    sys.path.insert(0, modpathz)
    import mods.face as MODZ
else:
    MODZ = None


class Console(Reactor):

    def __init__(self):
        Reactor.__init__(self)
        self.register("event", command)

    def callback(self, evt):
        Reactor.callback(self, evt)
        evt.wait()

    def display(self, evt):
        for txt in evt.result:
            self.raw(txt)

    def poll(self):
        evtt = Event()
        evtt.txt = input("> ")
        return evtt

    def raw(self, txt2):
        print(txt2)


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{NAME.upper()} since {tme}")


def errors():
    for error in Errors.errors:
        for line in error:
            print(line)


def command(bot, evt):
    parse(evt, evt.txt)
    if "ident" in dir(bot):
        evt.orig = bot.ident
    funct = Commands.cmds.get(evt.cmd, None)
    if funct:
        try:
            funct(evt)
            bot.display(evt)
        except Exception as ex:
            later(ex)
    evt.ready()


def wrap(func):
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    except Exception as ex:
        later(ex)
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


def main():
    parse(Cfg, " ".join(sys.argv[1:]))
    if "v" in Cfg.opts:
        readline.redisplay()
        banner()
    for _mod, thr in scan(MODS, MODZ, init="i" in Cfg.opts):
        if "w" in Cfg.opts and thr:
            thr.join()
    csl = Console()
    csl.start()
    forever()


if __name__ == "__main__":
    wrap(main)
    errors()
