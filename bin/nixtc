#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=R,W0105,C0413,W0611


"cli"


import getpass
import inspect
import logging
import os
import pathlib
import pwd
import readline
import sys
import termios
import time
import threading
import _thread


sys.path.insert(0, os.getcwd())


from nixt.command import Commands, command, parse, scanner
from nixt.main    import NAME, Config, enable, forever, init
from nixt.modules import face
from nixt.object  import Obj, keys
from nixt.persist import modpath
from nixt.runtime import Broker, Errors, Event, Reactor, later, launch


STARTTIME = time.time()


cfg = Config()


"client"


class Client(Reactor):

    "Client"

    def __init__(self):
        Reactor.__init__(self)
        Broker.add(self)
        self.register("event", command)

    def display(self, evt):
        "show results into a channel."
        for txt in evt.result:
            self.say(evt.channel, txt)

    def say(self, _channel, txt):
        "echo on verbose."
        self.raw(txt)

    def raw(self, txt):
        "print to screen."
        raise NotImplementedError


class Console(Client):

    "Console"

    def __init__(self):
        Client.__init__(self)
        self.register("event", command)

    def callback(self, evt):
        "wait for result."
        Client.callback(self, evt)
        evt.wait()

    def poll(self):
        "poll console and create event."
        evt = Event()
        evt.txt = input("> ")
        return evt

    def raw(self, txt):
        "print text."
        print(txt)


"utilities"


def banner():
    "show banner."
    tme = time.ctime(time.time()).replace("  ", " ")
    logging.error(f"{NAME.upper()} since {tme}")


def wrap(func):
    "reset console."
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    except Exception as ex:
        later(ex)
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)


"commands"


def cmd(event):
    "list commands."
    event.reply(",".join(sorted(keys(Commands.cmds))))


"main"


def main():
    "main"
    readline.redisplay()
    Commands.add(cmd)
    parse(cfg, " ".join(sys.argv[1:]))
    if "v" in cfg.opts:
        enable(cfg.sets.level)
        banner()
    scanner(face)
    if "i" in cfg.opts:
        for _mod, thr in init(face):
            if "w" in cfg.opts:
                thr.join()
    csl = Console()
    csl.start()
    forever()


if __name__ == "__main__":
    wrap(main)
    for error in Errors.errors:
        for line in error:
            print(line)
