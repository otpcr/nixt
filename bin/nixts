#!/usr/bin/env python3
# This file is placed in the Public Domain.


"service"


import getpass
import os
import pathlib
import pwd
import sys
import termios
import time
import _thread


from nixt.command import Config, scan
from nixt.persist import Workdir, pidname
from nixt.runtime import errors, exceptions, later


from nixt import modules as MODS


"defines"


cfg     = Config()
cfg.dis = "upt"


Workdir.wdr = os.path.expanduser(f"~/.{Config.name}")


"utilities"


def forever():
    """ run forever. """
    while True:
        try:
            time.sleep(0.1)
        except (KeyboardInterrupt, EOFError):
            _thread.interrupt_main()


def pidfile(filename):
    """ write the pid to a file. """
    if os.path.exists(filename):
        os.unlink(filename)
    path2 = pathlib.Path(filename)
    path2.parent.mkdir(parents=True, exist_ok=True)
    with open(filename, "w", encoding="utf-8") as fds:
        fds.write(str(os.getpid()))


def privileges():
    """ drop privileges. """
    pwnam2 = pwd.getpwnam(getpass.getuser())
    os.setgid(pwnam2.pw_gid)
    os.setuid(pwnam2.pw_uid)


def service():
    """ run as service. """
    privileges()
    pidfile(pidname(Config.name))
    scan(MODS, init=True)
    forever()


def wrap(func):
    """ wrapper to restore console. """
    old = None
    try:
        old = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    except exceptions as exc:
        later(exc)
    finally:
        if old:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old)
    for line in errors():
        print(line)


"runtime"


def main():
    """ wrap service. """
    wrap(service)


if __name__ == "__main__":
    main()
