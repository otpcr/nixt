#!/usr/bin/env python3
# This file is placed in the Public Domain.


"tinder"


import os
import shutil
import sys
import termios
import time
import _thread


from nixt.clients import Client, Event
from nixt.command import Commands, Config, parse, scan
from nixt.objects import Object, keys
from nixt.persist import Workdir, elapsed, skel
from nixt.runtime import exceptions, launch, errors, later


from nixt import modules as MODS


class MyException(Exception):

    """ My Exception. """


Workdir.wdr  = ".test"


cfg = Config()
cfg.index = 0


STARTTIME = time.time()


events = []
paylock = _thread.allocate_lock()


param = Object()
param.cfg = ["cfg nick=mekker", ""]
param.cmd = [""]
param.dne = ["mekker", ""]
param.dpl = ["hnrss title,url", ""]
param.exp = ['']
param.fnd = ["log", ""]
param.imp = ["tests/feeds.opml", ""]
param.log = ["bla", ""]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews", ""]
param.pwd = ["bla mekker", ""]
param.rem = ["hnrss", ""]
param.res = ["hnrss"]
param.rss = ["http://hnrss.org/newest", ""]
param.srv = [""]
param.tdo = ["mekker", ""]
param.thr = [""]
param.ver = [""]


"console"


class CLI(Client):

    """ CLI """

    def raw(self, txt):
        """ echo raw text. """
        if "v" in cfg.opts:
            print(txt)


def banner():
    """ show banner. """
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{Config.name.upper()} since {tme}")
    print(",".join(keys(Commands.cmds)))


def consume(evts):
    """ consume events. """
    done = []
    for evt in sorted(evts, key=lambda x: x.ctime):
        evt.wait()
        done.append(evt)
    for todo in done:
        events.remove(todo)
    return done


def payload(clt):
    """ run payload. """
    nmr = 0
    for cmdd in sorted(Commands.cmds):
        for ex in getattr(param, cmdd, [""]):
            evt = Event()
            evt.txt = cmdd + " " + ex
            evt.type = "command"
            events.append(evt)
            clt.put(evt)
            nmr += 1
    return nmr


def wrap(function):
    """ restore console. """
    old3 = None
    res  = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        res =  function()
    except (KeyboardInterrupt, EOFError):
        pass
    except exceptions as ex:
        later(ex)
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)
    return res


def dbg(evt):
    """ raise debug exception. """
    raise MyException("yooo!")


def main():
    """ main. """
    #Commands.add(dbg)
    parse(cfg, " ".join(sys.argv[1:]))
    MODS.rss.DEBUG = True
    scan(MODS)
    nrcommand = len(Commands.cmds) or 1
    if "v" in cfg.opts:
        banner()
        print("verbose is on")
    if "f" not in cfg.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    clt = CLI()
    clt.start()
    nrs = cfg.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt))
    for thr in thrs:
        thr.join()
    consume(events)
    clt.stop()
    #clt.wait()
    endtime = time.time()
    lap     = elapsed(endtime-STARTTIME)
    percall = (endtime-STARTTIME)/(nrs*nrcommand)
    if "v" in cfg.opts:
        for line in errors():
            print(line)
    return lap, nrs, nrcommand, percall

if __name__ == "__main__":
    LAP, NRS, NRCOMMAND, PERCALL = wrap(main)
    if "v" in cfg.opts:
        if not list(errors()):
            print("no errors")
        if events:
            print(f"{len(events)} events")
        print(f"{LAP} {NRS} {NRCOMMAND} {PERCALL}")
    sys.stdout.flush()
