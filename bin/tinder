#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C,W0105,W0201,W0212,W0718


"tinder"


import os
import shutil
import sys
import termios
import time
import threading
import _thread


sys.path.insert(0, os.getcwd())


from nixt.main    import NAME, Commands, scanner
from nixt.object  import Config, Object, parse
from nixt.persist import Workdir, laps, skel
from nixt.runtime import Errors, Reactor, later, launch


cfg = Config()


if os.path.exists("mods"):
    import mods.face as MODS
    MODS.rss.DEBUG = True
else:
    MODS = None


LAP = 1
NRS = 1
NRCOMMAND = 1
PERCALL   = 1
STARTTIME = time.time()


events = []
paylock = _thread.allocate_lock()


param = Object()
param.cmd = [""]
param.dpl = ["hnrss title,url"]
param.fnd = ["log", "todo", "rss", "config", "urls"]
param.imp = ["tests/feeds.opml"]
param.log = ["bla"]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews"]
param.pwd = ["bla mekker"]
param.rem = ["hnrss"]
param.res = [""]
param.rss = ["http://hnrss.org/newest", ""]
param.tdo = ["mekker", ""]
param.ver = [""]


class CLI(Reactor):

    def __init__(self):
        Reactor.__init__(self)
        self.register("event", command)

    def callback(self, evt):
        Reactor.callback(self, evt)
        if "w" in cfg.opts:
            evt.wait()

    def display(self, evt):
        for txt in evt.result:
            self.say(evt.channel, txt)

    def raw(self, txt):
        if "v" in cfg.opts:
            print(txt)

    def say(self, _channel, txt):
        self.raw(txt)


class Eventt:

    def __init__(self):
        self._ready  = threading.Event()
        self._thr    = None
        self.result  = []
        self.type    = "event"

    def __getattr__(self, keyy):
        return self.__dict__.get(keyy, "")

    def __str__(self):
        return str(self.__dict__)

    def reply(self, txt):
        self.result.append(txt)

    def ready(self):
        self._ready.set()

    def wait(self):
        self._ready.wait()
        if self._thr:
            self._thr.join()


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{NAME.upper()} since {tme}")


def command(bot, evt):
    parse(evt, evt.txt)
    if "ident" in dir(bot):
        evt.orig = bot.ident
    funco = Commands.cmds.get(evt.cmd, None)
    if funco:
        try:
            funco(evt)
            bot.display(evt)
        except Exception as ex:
            later(ex)
    evt.ready()


def consume(evts):
    for evt in evts:
        evt.wait()


def errors():
    for erring in Errors.errors:
        for line in erring:
            print(line)


def payload(clt):
    nmr = 0
    for cmdd in sorted(Commands.cmds):
        for ex in getattr(param, cmdd, [""]):
            evt = Eventt()
            evt.txt = cmdd + " " + ex
            clt.put(evt)
            events.append(evt)
            nmr += 1
    return nmr


def wrap(function):
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        pass
    except Exception as ex:
        later(ex)
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    Workdir.wdr = ".test"
    parse(cfg, " ".join(sys.argv[1:]))
    scanner(MODS)
    nrcommands = len(Commands.cmds) or 1
    if "v" in cfg.opts:
        banner()
    if "f" not in cfg.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    clt = CLI()
    clt.start()
    nrs = cfg.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, "payload", clt))
    for thr in thrs:
        thr.join()
    consume(events)
    if "v" in cfg.opts:
        endtime = time.time()
        lap = laps(endtime-STARTTIME)
        percall = (endtime-STARTTIME)/(nrs*nrcommands)
        print(",".join(Commands.cmds))
        print(f"{lap} {nrs} {nrcommands} {percall}")
        if not Errors.errors:
            print("no errors")


if __name__ == "__main__":
    wrap(main)
    errors()
