#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C0413,W0718


"tinder"


import os
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from nixt.command import Commands, Config, command, parse, scanner
from nixt.modules import face
from nixt.object  import Object
from nixt.persist import Workdir, laps, skel
from nixt.runtime import NAME, STARTTIME, Client, Errors, Event, later, launch


cfg = Config()


face.rss.DEBUG = True


LAP = 1
NRS = 1
NRCOMMAND = 1
PERCALL   = 1
STARTTIME = time.time()


events = []
paylock = _thread.allocate_lock()


param = Object()
param.cmd = [""]
param.dpl = ["hnrss title,url"]
param.fnd = ["log", "todo", "rss", "config"]
param.imp = ["tests/feeds.opml"]
param.log = ["bla"]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews"]
param.pwd = ["bla mekker"]
param.rem = ["hnrss"]
param.req = [""]
param.res = [""]
param.rss = ["http://hnrss.org/newest",]
param.tdo = ["mekker"]
param.tmr = ["13:00 bla", "23:59 mekker"]
param.udp = ["mekker"]
param.ver = [""]


class CLI(Client):

    "command line interface."

    def __init__(self):
        Client.__init__(self)
        self.register("event", command)

    def callback(self, evt):
        "wait for result"
        Client.callback(self, evt)
        if "w" in cfg.opts:
            evt.wait()

    def raw(self, txt):
        "check verboise."
        if "v" in cfg.opts:
            print(txt)


def banner():
    "show banner."
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{NAME.upper()} since {tme}")


def consume(evts):
    "wait for all events to finish."
    for evt in evts:
        evt.wait()


def errors():
    "print errors."
    for erring in Errors.errors:
        for line in erring:
            print(line)


def payload(clt):
    "do payload."
    nmr = 0
    for cmdd in sorted(Commands.cmds):
        for ex in getattr(param, cmdd, [""]):
            evt = Event()
            evt.txt = cmdd + " " + ex
            clt.put(evt)
            events.append(evt)
            nmr += 1
    return nmr


def wrap(function):
    "reset console."
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        pass
    except Exception as ex:
        later(ex)
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    "main"
    Workdir.wdr = ".test"
    parse(cfg, " ".join(sys.argv[1:]))
    scanner(face)
    nrcommands = len(Commands.cmds) or 1
    if "v" in cfg.opts:
        banner()
    if "f" not in cfg.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    clt = CLI()
    clt.start()
    nrs = cfg.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt))
    for thr in thrs:
        thr.join()
    consume(events)
    clt.wait()
    if "v" in cfg.opts:
        endtime = time.time()
        lap = laps(endtime-STARTTIME)
        percall = (endtime-STARTTIME)/(nrs*nrcommands)
        print(",".join(Commands.cmds))
        print(f"{lap} {nrs} {nrcommands} {percall}")
        if not Errors.errors:
            print("no errors")


if __name__ == "__main__":
    wrap(main)
    errors()
